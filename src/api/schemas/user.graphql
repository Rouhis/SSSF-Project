type User {
  id: ID!
  user_name: String!
  email: String!
  organization: String!
}

type AddedUser {
  id: ID!
  user_name: String!
  email: String!
  organization: String!
  password: String!
}

type LoginResponse {
  token: String
  message: String!
  user: User!
}

type UserResponse {
  message: String!
  user: User!
}

type AddedUserResponse {
  message: String!
  user: AddedUser!
}

input Credentials {
  username: String!
  password: String!
}

input UserInput {
  user_name: String!
  email: String!
  organization: String!
}

input UserModify {
  user_name: String
  email: String
  password: String
  organization: String
}

type Query {
  users: [User]
  userById(id: ID!): User
  checkToken: UserResponse
}

type UserDeleteResponse {
  message: String!
  user: User
}

type Mutation {
  login(credentials: Credentials!): LoginResponse
  registerEmployee(user: UserInput!): AddedUserResponse
  registerFaciltyManager(user: UserInput!): AddedUserResponse
  updateUser(user: UserModify!): UserResponse
  deleteUser: UserDeleteResponse
  """
  Separate mutations for admin because of rest api
  """
  updateUserAsAdmin(user: UserModify!, id: ID!): UserResponse
  """
  Separate mutations for admin because of rest api
  """
  deleteUserAsAdmin(id: ID!): UserDeleteResponse
}